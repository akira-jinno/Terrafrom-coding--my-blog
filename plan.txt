【main.tf】
provider "aws" {
  region = var.region
}

module "vpc" {
  source    = "./modules/vpc"
  vpc_cidr  = var.vpc_cidr
}

module "ec2" {
  source        = "./modules/ec2"
  ami_id        = var.ami_id
  instance_type = var.instance_type
  subnet_id     = module.vpc.public_subnet_id
}

module "alb" {
  source     = "./modules/alb"
  vpc_id     = module.vpc.vpc_id
  subnet_ids = module.vpc.public_subnet_ids
}

module "s3" {
  source      = "./modules/s3"
  bucket_name = var.bucket_name
}


ーーーーーーーーーーーーーー
【output.tf】
output "vpc_id" {
  description = "作成したVPCのID"
  value       = module.vpc.vpc_id
}

# output "ec2_public_ip" {
#   description = "EC2インスタンスのパブリックIP"
#   value       = module.ec2.public_ip
# }

output "alb_dns_name" {
  description = "ALBのDNS名"
  value       = module.alb.alb_dns_name
}

output "s3_bucket_arn" {
  description = "S3バケットのARN"
  value       = module.s3.bucket_arn
}

output "ec2_public_ip" {
  description = "EC2インスタンスのElastic IP"
  value       = module.ec2.elastic_ip
}



ーーーーーーーーーーーーーー
【variables.tf】
variable "region" {
  description = "AWSリージョン"
  type        = string
  default     = "ap-northeast-1"
}

variable "vpc_cidr" {
  description = "VPCのCIDRブロック"
  type        = string
  default     = "10.0.0.0/16"
}

variable "ami_id" {
  description = "EC2用のAMI ID（既存のブログイメージをAMI化して指定）"
  type        = string
}

variable "instance_type" {
  description = "EC2のインスタンスタイプ"
  type        = string
  default     = "t2.micro"
}

variable "bucket_name" {
  description = "S3バケットの名前"
  type        = string
  default     = "tf-coding-my-blog-bucket"
}



ーーーーーーーーーーーーーー
【terraform.tfvars】
region        = "ap-northeast-1"
vpc_cidr      = "10.1.0.0/16"
ami_id        = "ami-076b729e27f068c4b"  # 既存ブログのAMI IDに置き換え
instance_type = "t2.micro"
bucket_name   = "terraform-coding-my-blog-bucket"




ーーーーーーーーーーーーーー
【./modules/alb/main.tf】
resource "aws_security_group" "alb_sg" {
  name        = "tf-alb-sg"
  description = "Security group for ALB"
  vpc_id      = var.vpc_id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_lb" "this" {
  name               = "tf-alb-blog"
  internal           = false
  load_balancer_type = "application"
  subnets            = var.subnet_ids
  security_groups    = [aws_security_group.alb_sg.id]

  tags = {
    Name = "tf-alb-blog"
  }
}

resource "aws_lb_target_group" "this" {
  name     = "tf-tg-blog"
  port     = 80
  protocol = "HTTP"
  vpc_id   = var.vpc_id

  health_check {
    healthy_threshold   = 3
    unhealthy_threshold = 3
    timeout             = 5
    interval            = 30
    path                = "/"
    matcher             = "200"
  }
}

resource "aws_lb_listener" "this" {
  load_balancer_arn = aws_lb.this.arn
  port              = "80"
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.this.arn
  }
}




ーーーーーーーーーーーーーー
【./modules/alb/outputs.tf】
output "alb_dns_name" {
  description = "ALBのDNS名"
  value       = aws_lb.this.dns_name
}




ーーーーーーーーーーーーーー
【./modules/alb/variables.tf】
variable "vpc_id" {
  description = "ALBを配置するVPCのID"
  type        = string
}

variable "subnet_ids" {
  description = "ALBを配置するサブネットのIDリスト"
  type        = list(string)
}




ーーーーーーーーーーーーーー
【./modules/ec2/main.tf】

resource "aws_instance" "this" {
  ami                         = var.ami_id
  instance_type               = var.instance_type
  subnet_id                   = var.subnet_id
  associate_public_ip_address = false

  # ★ ここでスポットインスタンスとして起動するオプションを指定
  instance_market_options {
    market_type = "spot"
    spot_options {
      max_price = var.spot_price
    }
  }

  tags = {
    Name = "tf-ec2-blog-spot"
  }
}

resource "aws_eip" "this" {
  instance = aws_instance.this.id

  tags = {
    Name = "tf-ec2-elastic-ip"
  }
}



ーーーーーーーーーーーーーー
【./modules/ec2/outputs.tf】

output "instance_id" {
  description = "EC2インスタンスのID"
  value       = aws_instance.this.id
}

output "elastic_ip" {
  description = "Elastic IPアドレス"
  value       = aws_eip.this.public_ip
}




ーーーーーーーーーーーーーー
【./modules/ec2/variables.tf】

variable "ami_id" {
  description = "EC2で利用するAMI ID"
  type        = string
}

variable "instance_type" {
  description = "EC2のインスタンスタイプ"
  type        = string
}

# スポットインスタンス用の最大入札価格（USD）
variable "spot_price" {
  description = "スポットインスタンスの最大入札価格 (USD)"
  type        = string
  default     = "0.005"  # 必要に応じて調整してください
}

variable "subnet_id" {
  description = "EC2を配置するサブネットのID"
  type        = string
}



ーーーーーーーーーーーーーー
【./modules/s3/main.tf】

resource "aws_s3_bucket" "this" {
  bucket = var.bucket_name

  tags = {
    Name = "tf-s3-blog"
  }
}

resource "aws_s3_bucket_versioning" "this" {
  bucket = aws_s3_bucket.this.id

  versioning_configuration {
    status = "Enabled"
  }
}



ーーーーーーーーーーーーーー
【./modules/s3/outputs.tf】

output "bucket_arn" {
  description = "S3バケットのARN"
  value       = aws_s3_bucket.this.arn
}




ーーーーーーーーーーーーーー
【./modules/s3/variables.tf】

variable "bucket_name" {
  description = "S3バケットの名前"
  type        = string
}




ーーーーーーーーーーーーーー
【./modules/vpc/main.tf】

resource "aws_vpc" "this" {
  cidr_block           = var.vpc_cidr
  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Name = "tf-vpc"
  }
}

# インターネットゲートウェイを追加
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.this.id

  tags = {
    Name = "tf-vpc-igw"
  }
}

data "aws_availability_zones" "available" {}

resource "aws_subnet" "public" {
  count                   = 2
  vpc_id                  = aws_vpc.this.id
  cidr_block              = cidrsubnet(aws_vpc.this.cidr_block, 8, count.index)
  availability_zone       = element(data.aws_availability_zones.available.names, count.index)
  map_public_ip_on_launch = true

  tags = {
    Name = "tf-public-subnet-${count.index + 1}"
  }
}

# パブリックサブネット用ルートテーブル
resource "aws_route_table" "public" {
  vpc_id = aws_vpc.this.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }

  tags = {
    Name = "tf-public-rt"
  }
}

# 各パブリックサブネットにルートテーブルを関連付け
resource "aws_route_table_association" "public" {
  count          = length(aws_subnet.public)
  subnet_id      = aws_subnet.public[count.index].id
  route_table_id = aws_route_table.public.id
}

# ★ セキュリティグループの定義を追加 ★
resource "aws_security_group" "default" {
  name        = "tf-default-sg"
  description = "Default security group for tf-vpc"
  vpc_id      = aws_vpc.this.id

  ingress {
    description = "Allow HTTP"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "Allow HTTPS"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "Allow SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "tf-default-sg"
  }
}


ーーーーーーーーーーーーーー
【./modules/vpc/outputs.tf】

output "vpc_id" {
  description = "VPCのID"
  value       = aws_vpc.this.id
}

output "public_subnet_ids" {
  description = "作成したパブリックサブネットのIDリスト"
  value       = aws_subnet.public[*].id
}

output "public_subnet_id" {
  description = "利用するパブリックサブネット（先頭の1件）"
  value       = aws_subnet.public[0].id
}




ーーーーーーーーーーーーーー
【./modules/vpc/variables.tf】

variable "vpc_cidr" {
  description = "VPCのCIDRブロック"
  type        = string
}


ーーーーーーーーーーーーーー
